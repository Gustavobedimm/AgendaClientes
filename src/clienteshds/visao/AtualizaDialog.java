package clienteshds.visao;

import clienteshds.DAO.GravaLog;
import clienteshds.modelo.Empresa;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gustavo Bedim Mazutti
 */
public final class AtualizaDialog extends javax.swing.JDialog {

    Empresa empresa = new Empresa();
    String origem = "";
    String destino = "";

    /**
     * Creates new form ResultadoDialog
     *
     * @param parent
     * @param modal
     */
    public AtualizaDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public AtualizaDialog(java.awt.Frame parent, boolean modal, Empresa empresaP) {
        super(parent, modal);
        initComponents();
        empresa = empresaP;
        iniciaTela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pastaEmpresa = new javax.swing.JLabel();
        ComboBoxPasta = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        BtnEnviar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        txtOrigem = new javax.swing.JTextField();
        txtDestino = new javax.swing.JTextField();
        jProgressBar1 = new javax.swing.JProgressBar();
        qtdOrigem = new javax.swing.JTextField();
        qtdDestino = new javax.swing.JTextField();
        status = new javax.swing.JTextField();
        qtdSelecionada = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        statusDestino = new javax.swing.JTextField();
        btnAtuaDestino = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Transferência de arquivos");
        setResizable(false);
        setSize(new java.awt.Dimension(650, 505));

        pastaEmpresa.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        pastaEmpresa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        ComboBoxPasta.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ComboBoxPasta.setMaximumRowCount(10);
        ComboBoxPasta.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "HDS_EXEC", "BARRA", "ARQ00", "ARQ01", "ARQ02", "ARQ03", "ARQ05", "ARQ13", "ARQ20", "ARQ91", "C-SPC" }));
        ComboBoxPasta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxPastaItemStateChanged(evt);
            }
        });
        ComboBoxPasta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxPastaActionPerformed(evt);
            }
        });
        ComboBoxPasta.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                ComboBoxPastaPropertyChange(evt);
            }
        });

        jTable2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Data de modificação", "Tamanho"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jTable2MouseMoved(evt);
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTable2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jTable2MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable2MousePressed(evt);
            }
        });
        jTable2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable2PropertyChange(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(2).setMinWidth(80);
            jTable2.getColumnModel().getColumn(2).setPreferredWidth(80);
            jTable2.getColumnModel().getColumn(2).setMaxWidth(80);
        }

        BtnEnviar.setText("Enviar >>");
        BtnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEnviarActionPerformed(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Data de modificação", "Tamanho"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.setEnabled(false);
        jTable3.setFocusable(false);
        jScrollPane3.setViewportView(jTable3);

        txtOrigem.setEnabled(false);

        txtDestino.setEnabled(false);

        qtdOrigem.setEnabled(false);

        qtdDestino.setEnabled(false);

        status.setDisabledTextColor(new java.awt.Color(0, 102, 204));
        status.setEnabled(false);

        qtdSelecionada.setEnabled(false);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Selecionado ");

        statusDestino.setDisabledTextColor(new java.awt.Color(0, 102, 204));
        statusDestino.setEnabled(false);

        btnAtuaDestino.setText("Atualizar");
        btnAtuaDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtuaDestinoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(status)
                                .addGap(18, 18, 18)
                                .addComponent(qtdOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                            .addComponent(txtOrigem, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ComboBoxPasta, 0, 96, Short.MAX_VALUE)
                            .addComponent(BtnEnviar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pastaEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(qtdSelecionada)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(statusDestino)
                                .addGap(18, 18, 18)
                                .addComponent(qtdDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnAtuaDestino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAtuaDestino))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pastaEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ComboBoxPasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(qtdSelecionada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(BtnEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qtdOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qtdDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BtnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEnviarActionPerformed
        transfere();
    }//GEN-LAST:event_BtnEnviarActionPerformed


    private void jTable2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable2PropertyChange
     }//GEN-LAST:event_jTable2PropertyChange

    private void jTable2MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseMoved
        qtdSelecionada.setText(Integer.toString(jTable2.getSelectedRowCount()) + " Arquivos");

    }//GEN-LAST:event_jTable2MouseMoved

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
    }//GEN-LAST:event_jTable2MouseClicked

    private void jTable2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseEntered
    }//GEN-LAST:event_jTable2MouseEntered

    private void jTable2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseExited
    }//GEN-LAST:event_jTable2MouseExited

    private void jTable2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MousePressed
    }//GEN-LAST:event_jTable2MousePressed

    private void ComboBoxPastaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_ComboBoxPastaPropertyChange

    }//GEN-LAST:event_ComboBoxPastaPropertyChange

    private void ComboBoxPastaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxPastaItemStateChanged

    }//GEN-LAST:event_ComboBoxPastaItemStateChanged

    private void btnAtuaDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtuaDestinoActionPerformed
        carregaDestino();
    }//GEN-LAST:event_btnAtuaDestinoActionPerformed

    private void ComboBoxPastaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxPastaActionPerformed
        DefaultTableModel model2 = (DefaultTableModel) jTable2.getModel();
        while (model2.getRowCount() > 0) {
            model2.removeRow(0);
        }
        DefaultTableModel model3 = (DefaultTableModel) jTable3.getModel();
        while (model3.getRowCount() > 0) {
            model3.removeRow(0);
        }
        txtDestino.setText("");
        txtOrigem.setText("");
        iniciaTela();
    }//GEN-LAST:event_ComboBoxPastaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AtualizaDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AtualizaDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AtualizaDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AtualizaDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AtualizaDialog dialog = new AtualizaDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnEnviar;
    private javax.swing.JComboBox ComboBoxPasta;
    private javax.swing.JButton btnAtuaDestino;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JLabel pastaEmpresa;
    private javax.swing.JTextField qtdDestino;
    private javax.swing.JTextField qtdOrigem;
    private javax.swing.JTextField qtdSelecionada;
    private javax.swing.JTextField status;
    private javax.swing.JTextField statusDestino;
    private javax.swing.JTextField txtDestino;
    private javax.swing.JTextField txtOrigem;
    // End of variables declaration//GEN-END:variables
    public void iniciaTela() {
        origem = "";
        destino = "";
        txtOrigem.setText("");
        txtDestino.setText("");

        setTitle("Transferência de arquivos - " + empresa.getFantasia());
        pastaEmpresa.setText(empresa.getPasta());
        String opcao = (String) ComboBoxPasta.getSelectedItem();
        if (ComboBoxPasta.getSelectedIndex() == 0) {
            origem = "S:\\" + opcao + "\\" + empresa.getPasta() + "\\";
            destino = "X:\\" + opcao + "\\" + empresa.getPasta() + "\\";
        } else if (ComboBoxPasta.getSelectedIndex() == 1) {
            origem = "S:\\HDS_EXEC\\";
            destino = "X:\\HDS_EXEC\\" + empresa.getPasta() + "\\BARRA\\";
        } else {
            origem = "S:\\HDS_ARQS\\" + empresa.getPasta() + "\\" + opcao + "\\";
            destino = "X:\\HDS_ARQS\\" + empresa.getPasta() + "\\" + opcao + "\\";
        }
        txtOrigem.setText(origem);
        txtDestino.setText(destino);

        carregaOrigem();
        carregaDestino();
    }

    public void carregaOrigem() {
        new Thread() {
            @Override
            public void run() {
                
                
                setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
                ComboBoxPasta.setEnabled(false);
                BtnEnviar.setEnabled(false);
                jTable2.setEnabled(false);
                DefaultTableModel model2 = (DefaultTableModel) jTable2.getModel();
                
                File diretorioOrigem = new File(origem);
                if (diretorioOrigem.exists()) {
                    status.setText("Lendo diretorio");
                    File[] listaDiretorios = diretorioOrigem.listFiles();
                    qtdOrigem.setText("");
                    qtdOrigem.setText(listaDiretorios.length + " Arquivos");
                    status.setText("Ordenando arquivos");
                    Arrays.sort(listaDiretorios, Comparator.comparingLong(File::lastModified).reversed());
                    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                    status.setText("Carregando tabela");
                    for (File e : listaDiretorios) {
                        if (e.isFile()) {
                            long size = e.length() / 1024;
                            model2.addRow(new Object[]{e.getName(), sdf.format(e.lastModified()), size + " KB"});
                        }
                    }
                    jTable2.setEnabled(true);
                    BtnEnviar.setEnabled(true);
                    status.setText("Tudo pronto, agora é só transferir os seus arquivos :)");
                } else {
                    status.setText("Ops, diretório não encontrado :(");
                }
                setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                ComboBoxPasta.setEnabled(true);
            }
        }.start();
    }

    public void carregaDestino() {
        new Thread() {
            @Override
            public void run() {
                DefaultTableModel model3 = (DefaultTableModel) jTable3.getModel();
                while (model3.getRowCount() > 0) {
                    model3.removeRow(0);
                }
                btnAtuaDestino.setEnabled(false);
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                File diretorioDestinno = new File(destino);
                if (!diretorioDestinno.exists()) {
                    JOptionPane.showMessageDialog(null, "A empresa não tem a pasta " + destino + " configurada na unidade X: , configure antes de continuar.");
                    dispose();
                } else {
                    statusDestino.setText("Lendo diretorio");
                    File[] listDirDest = diretorioDestinno.listFiles();
                    int cont = 0;
                    for (File e : listDirDest) {
                        if (e.isFile()) {
                            cont++;
                            long size = e.length() / 1024;
                            model3.addRow(new Object[]{e.getName(), sdf.format(e.lastModified()), size + " KB"});
                        }
                    }
                    statusDestino.setText(":)");
                    qtdDestino.setText(cont + " Arquivos");
                }
                btnAtuaDestino.setEnabled(true);
            }
        }
                .start();
    }

    public void transfere() {
        new Thread() {
            @Override
            public void run() {
                GravaLog gravaLog = new GravaLog();
                ArrayList<String> listaArquivos = new ArrayList<>();
                DefaultTableModel model2 = (DefaultTableModel) jTable2.getModel();
                int[] indexs = jTable2.getSelectedRows();
                if (indexs.length > 0) {
                    setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
                    jProgressBar1.setMaximum(indexs.length);
                    for (int i = 0; i < indexs.length; i++) {
                        jProgressBar1.setValue(i + 1);
                        try {
                            listaArquivos.add(model2.getValueAt(indexs[i], 0).toString());
                            File fileOrigem = new File(origem + model2.getValueAt(indexs[i], 0));
                            File fileDestino = new File(destino + model2.getValueAt(indexs[i], 0));
                            FileInputStream in = new FileInputStream(fileOrigem);
                            FileOutputStream out = new FileOutputStream(fileDestino);
                            byte[] buf = new byte[1024];
                            int len;
                            while ((len = in.read(buf)) > 0) {
                                out.write(buf, 0, len);
                            }
                        } catch (IOException e) {
                            System.out.println("Erro ao transferir arquivo.");
                        }
                    }
                    carregaDestino();
                    jProgressBar1.setValue(0);
                    gravaLog.gravaAtualizações(listaArquivos, pastaEmpresa.getText());
                    setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                    
                } else {
                    JOptionPane.showMessageDialog(null, "Selecione os arquivos a serem enviados.");
                }
            }
        }
                .start();
    }
}
