package clienteshds.visao;

import clienteshds.DAO.EmpresaDAO;
import clienteshds.modelo.Backup;
import java.awt.BorderLayout;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

public final class DashboardBackup extends javax.swing.JFrame {

    EmpresaDAO empresaDAO = new EmpresaDAO();
    ArrayList<Backup> listaBackupsERROS = new ArrayList();

    /**
     * Creates new form Dashboard
     */
    public DashboardBackup() {
        initComponents();
        setExtendedState(MAXIMIZED_BOTH);
        ImageIcon icone = new ImageIcon("100x100.png");
        setIconImage(icone.getImage());
        carregaLista();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableBackup = new javax.swing.JTable();
        PainelBackup = new javax.swing.JPanel();
        PainelBackup1 = new javax.swing.JPanel();
        imgGrafico = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableBackupCliente = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableBackupERROS = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Backup ClientesHDS");
        setBackground(new java.awt.Color(255, 255, 255));

        jTableBackup.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID_Cliente", "Pasta Cliente", "Resultado", "Nome da tarefa", "Data/Hora fim"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableBackup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableBackupMouseClicked(evt);
            }
        });
        jTableBackup.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableBackupKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTableBackup);
        if (jTableBackup.getColumnModel().getColumnCount() > 0) {
            jTableBackup.getColumnModel().getColumn(0).setMinWidth(100);
            jTableBackup.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTableBackup.getColumnModel().getColumn(0).setMaxWidth(100);
            jTableBackup.getColumnModel().getColumn(1).setMinWidth(150);
            jTableBackup.getColumnModel().getColumn(1).setPreferredWidth(150);
            jTableBackup.getColumnModel().getColumn(1).setMaxWidth(150);
        }

        PainelBackup.setBackground(new java.awt.Color(255, 255, 255));
        PainelBackup.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        PainelBackup.setMaximumSize(new java.awt.Dimension(275, 199));
        PainelBackup.setMinimumSize(new java.awt.Dimension(275, 199));
        PainelBackup.setPreferredSize(new java.awt.Dimension(275, 199));

        javax.swing.GroupLayout PainelBackupLayout = new javax.swing.GroupLayout(PainelBackup);
        PainelBackup.setLayout(PainelBackupLayout);
        PainelBackupLayout.setHorizontalGroup(
            PainelBackupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 295, Short.MAX_VALUE)
        );
        PainelBackupLayout.setVerticalGroup(
            PainelBackupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 195, Short.MAX_VALUE)
        );

        PainelBackup1.setBackground(new java.awt.Color(255, 255, 255));
        PainelBackup1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        PainelBackup1.setMaximumSize(new java.awt.Dimension(275, 199));
        PainelBackup1.setMinimumSize(new java.awt.Dimension(275, 199));
        PainelBackup1.setPreferredSize(new java.awt.Dimension(275, 199));

        javax.swing.GroupLayout PainelBackup1Layout = new javax.swing.GroupLayout(PainelBackup1);
        PainelBackup1.setLayout(PainelBackup1Layout);
        PainelBackup1Layout.setHorizontalGroup(
            PainelBackup1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PainelBackup1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imgGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );
        PainelBackup1Layout.setVerticalGroup(
            PainelBackup1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelBackup1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imgGrafico)
                .addContainerGap(184, Short.MAX_VALUE))
        );

        jTableBackupCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID_Cliente", "Pasta Cliente", "Resultado", "Nome da tarefa", "Data/Hora fim"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableBackupCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableBackupClienteMouseClicked(evt);
            }
        });
        jTableBackupCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableBackupClienteKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTableBackupCliente);
        if (jTableBackupCliente.getColumnModel().getColumnCount() > 0) {
            jTableBackupCliente.getColumnModel().getColumn(0).setMinWidth(100);
            jTableBackupCliente.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTableBackupCliente.getColumnModel().getColumn(0).setMaxWidth(100);
            jTableBackupCliente.getColumnModel().getColumn(1).setMinWidth(150);
            jTableBackupCliente.getColumnModel().getColumn(1).setPreferredWidth(150);
            jTableBackupCliente.getColumnModel().getColumn(1).setMaxWidth(150);
        }

        jTableBackupERROS.setForeground(new java.awt.Color(255, 0, 0));
        jTableBackupERROS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID_Cliente", "Pasta Cliente", "Resultado", "Nome da tarefa", "Data/Hora fim"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableBackupERROS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableBackupERROSMouseClicked(evt);
            }
        });
        jTableBackupERROS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableBackupERROSKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jTableBackupERROS);
        if (jTableBackupERROS.getColumnModel().getColumnCount() > 0) {
            jTableBackupERROS.getColumnModel().getColumn(0).setMinWidth(100);
            jTableBackupERROS.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTableBackupERROS.getColumnModel().getColumn(0).setMaxWidth(100);
            jTableBackupERROS.getColumnModel().getColumn(1).setMinWidth(150);
            jTableBackupERROS.getColumnModel().getColumn(1).setPreferredWidth(150);
            jTableBackupERROS.getColumnModel().getColumn(1).setMaxWidth(150);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 809, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PainelBackup, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PainelBackup1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PainelBackup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PainelBackup1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTableBackupMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableBackupMouseClicked
            eventoTabela();
    }//GEN-LAST:event_jTableBackupMouseClicked

    private void jTableBackupKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableBackupKeyReleased
        if (evt.getKeyCode() == evt.VK_DOWN || evt.getKeyCode() == evt.VK_UP) {
            eventoTabela();
        }
    }//GEN-LAST:event_jTableBackupKeyReleased

    private void jTableBackupClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableBackupClienteMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableBackupClienteMouseClicked

    private void jTableBackupClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableBackupClienteKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableBackupClienteKeyReleased

    private void jTableBackupERROSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableBackupERROSMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableBackupERROSMouseClicked

    private void jTableBackupERROSKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableBackupERROSKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableBackupERROSKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DashboardBackup.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DashboardBackup.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DashboardBackup.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DashboardBackup.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DashboardBackup().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PainelBackup;
    private javax.swing.JPanel PainelBackup1;
    private javax.swing.JLabel imgGrafico;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableBackup;
    private javax.swing.JTable jTableBackupCliente;
    private javax.swing.JTable jTableBackupERROS;
    // End of variables declaration//GEN-END:variables
    public void carregaLista() {
        DefaultTableModel model = (DefaultTableModel) jTableBackup.getModel();
        DefaultTableModel modelERROS = (DefaultTableModel) jTableBackupERROS.getModel();

        ArrayList<Backup> listaBackups = new ArrayList();
        try {
            listaBackups = empresaDAO.buscaTodosBackup();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DashboardBackup.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        int contSucesso = 0;
        int contAviso = 0;
        int contErro = 0;
        for (Backup backup : listaBackups) {

            if (backup.getRetorno().contains("sucesso")) {
                contSucesso++;
            }
            if (backup.getRetorno().contains("erro")) {
                listaBackupsERROS.add(backup);
                contErro++;
            }
            if (backup.getRetorno().contains("aviso")) {
                contAviso++;
            }
            model.addRow(new Object[]{backup.getId_cliente(), backup.getPastaEmpresa(), backup.getRetorno(), backup.getNome(), backup.getDataFim()});
        }
        for (Backup backup : listaBackupsERROS) {
            modelERROS.addRow(new Object[]{backup.getId_cliente(), backup.getPastaEmpresa(), backup.getRetorno(), backup.getNome(), backup.getDataFim()});
        }
        jTableBackup.addRowSelectionInterval(0, 0);
        criaGrafico(contSucesso, contErro, contAviso);
        eventoTabela();

    }

    public void criaGrafico(Integer sucesso, Integer erro, Integer aviso) {
        PainelBackup.setLayout(new BorderLayout());
        DefaultCategoryDataset barra = new DefaultCategoryDataset();
        barra.setValue(erro, "Erro", erro);
        barra.setValue(aviso, "Aviso", aviso);
        barra.setValue(sucesso, "Sucesso", sucesso);
        JFreeChart grafico = ChartFactory.createBarChart3D("Backup Geral", "Tipos", "Ocorrências", barra, PlotOrientation.VERTICAL, true, true, false);
        ChartPanel painel = new ChartPanel(grafico);
        try {
            ChartUtilities.saveChartAsPNG(new File("graficoGeral.png"), grafico, 300, 200, null);

        } catch (IOException ex) {
            Logger.getLogger(DashboardBackup.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        painel.setEnabled(false);
        PainelBackup.add(painel);
    }

    public void eventoTabela() {
        DefaultTableModel model = (DefaultTableModel) jTableBackupCliente.getModel();
        while (jTableBackupCliente.getRowCount() > 0) {
            model.removeRow(0);
        }
        ArrayList<Backup> listaBackups = new ArrayList();
        Integer id = (Integer) jTableBackup.getValueAt(jTableBackup.getSelectedRow(), 0);
        try {
            listaBackups = empresaDAO.buscaTodosBackupID(id);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DashboardBackup.class.getName()).log(Level.SEVERE, null, ex);
        }
        Integer contSucesso = 0;
        Integer contAviso = 0;
        Integer contErro = 0;
        String pasta = "";
        for (Backup backup : listaBackups) {
            pasta = backup.getPastaEmpresa();
            if (backup.getRetorno().contains("sucesso")) {
                contSucesso++;
            }
            if (backup.getRetorno().contains("erro")) {
                contErro++;
            }
            if (backup.getRetorno().contains("aviso")) {
                contAviso++;
            }
            model.addRow(new Object[]{backup.getId_cliente(), backup.getPastaEmpresa(), backup.getRetorno(), backup.getNome(), backup.getDataFim()});
        }
        criaGraficoCliente(contSucesso, contErro, contAviso, pasta);
    }
    public void criaGraficoCliente(Integer sucesso, Integer erro, Integer aviso, String pasta) {
        new Thread() {
            @Override
            public void run() {
                imgGrafico.setIcon(null);
                PainelBackup1.setLayout(new BorderLayout());
                DefaultCategoryDataset barra = new DefaultCategoryDataset();
                barra.setValue(erro, "Erro", erro);
                barra.setValue(aviso, "Aviso", aviso);
                barra.setValue(sucesso, "Sucesso", sucesso);
                JFreeChart grafico = ChartFactory.createBarChart3D("Backup " + pasta, "Tipos", "Ocorrências", barra, PlotOrientation.VERTICAL, true, true, false);
                ChartPanel painel = new ChartPanel(grafico);
                try {
                    ChartUtilities.saveChartAsPNG(new File("graficoCliente.png"), grafico, 300, 200, null);

                } catch (IOException ex) {
                    Logger.getLogger(DashboardBackup.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                painel.setEnabled(false);
                PainelBackup1.add(painel);
                imgGrafico.setIcon(new ImageIcon("graficoCliente.png"));
            }
        }.start();
    }
}
